def gcd(n, d):
    while n != d:
        if n > d:
            n = n - d
        else:
            d = d - n
    return n
class Fraction:
    def __init__(self, n, d):
        self.num = int(n / gcd(abs(n), abs(d)))
        self.denom = int(d / gcd(abs(n), abs(d)))
        if self.denom < 0:
            self.denom = abs(self.denom)
            self.num = -1*self.num
        elif self.denom == 0:
            raise ZeroDivisionError

    def Add(self, other):
        return self.num*other.denom + self.denom*other.num, self.denom*other.denom
    def Sub(self, other):
        return self.num*other.denom - self.denom*other.num, self.denom*other.denom
    def Mul(self, other):
        return self.num*other.num, self.denom*other.denom
    def Div(self, other):
        return self.num*other.denom, self.denom*other.num
    def __str__(self):
        if type(self) is tuple:
            if self[1] < 0:
                return '%s/%s' %(self[0], -1*self[1])
            else:
                return 
	
